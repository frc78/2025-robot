package frc.robot.subsystems.drivetrain

import com.ctre.phoenix6.CANBus
import com.ctre.phoenix6.configs.CANcoderConfiguration
import com.ctre.phoenix6.configs.CurrentLimitsConfigs
import com.ctre.phoenix6.configs.Pigeon2Configuration
import com.ctre.phoenix6.configs.Slot0Configs
import com.ctre.phoenix6.configs.TalonFXConfiguration
import com.ctre.phoenix6.signals.StaticFeedforwardSignValue
import com.ctre.phoenix6.swerve.SwerveDrivetrainConstants
import com.ctre.phoenix6.swerve.SwerveModuleConstants
import com.ctre.phoenix6.swerve.SwerveModuleConstants.DriveMotorArrangement
import com.ctre.phoenix6.swerve.SwerveModuleConstants.SteerMotorArrangement
import com.ctre.phoenix6.swerve.SwerveModuleConstantsFactory
import edu.wpi.first.units.Units.Amps
import edu.wpi.first.units.Units.Inches
import edu.wpi.first.units.Units.KilogramSquareMeters
import edu.wpi.first.units.Units.MetersPerSecond
import edu.wpi.first.units.Units.Rotations
import edu.wpi.first.units.Units.Volts
import edu.wpi.first.units.measure.Angle
import edu.wpi.first.units.measure.Current
import edu.wpi.first.units.measure.Distance
import edu.wpi.first.units.measure.LinearVelocity
import edu.wpi.first.units.measure.MomentOfInertia
import edu.wpi.first.units.measure.Voltage

// Generated by the Tuner X Swerve Project Generator
// https://v6.docs.ctr-electronics.com/en/stable/docs/tuner/tuner-swerve/index.html
object TunerConstants {

    // Both sets of gains need to be tuned to your individual robot.
    // The steer motor uses any SwerveModule.SteerRequestType control request with the
    // output type specified by SwerveModuleConstants.SteerMotorClosedLoopOutput
    private val steerGainsN: Slot0Configs =
        Slot0Configs()
            .withKP(50.0)
            .withKI(0.0)
            .withKD(0.5)
            .withKS(0.1)
            .withKV(2.33)
            .withKA(0.0)
            .withStaticFeedforwardSign(StaticFeedforwardSignValue.UseClosedLoopSign)
    private val steerGainsC: Slot0Configs =
        Slot0Configs()
            .withKP(50.0)
            .withKI(0.0)
            .withKD(0.5)
            .withKS(0.1)
            .withKV(1.59)
            .withKA(0.0)
            .withStaticFeedforwardSign(StaticFeedforwardSignValue.UseClosedLoopSign)
    // When using closed-loop control, the drive motor uses the control
    // output type specified by SwerveModuleConstants.DriveMotorClosedLoopOutput
    private val driveGains: Slot0Configs =
        Slot0Configs().withKP(0.4).withKI(0.0).withKD(0.0).withKS(0.0).withKV(0.124)

    // The closed-loop output type to use for the steer motors;
    // This affects the PID/FF gains for the steer motors
    private val kSteerClosedLoopOutput: SwerveModuleConstants.ClosedLoopOutputType =
        SwerveModuleConstants.ClosedLoopOutputType.Voltage
    // The closed-loop output type to use for the drive motors;
    // This affects the PID/FF gains for the drive motors
    private val kDriveClosedLoopOutput: SwerveModuleConstants.ClosedLoopOutputType =
        SwerveModuleConstants.ClosedLoopOutputType.Voltage

    // The type of motor used for the drive motor
    private val kDriveMotorType: DriveMotorArrangement = DriveMotorArrangement.TalonFX_Integrated
    // The type of motor used for the drive motor
    private val kSteerMotorType: SteerMotorArrangement = SteerMotorArrangement.TalonFX_Integrated

    // The remote sensor feedback type to use for the steer motors;
    // When not Pro-licensed, Fused*/Sync* automatically fall back to Remote*
    private val kSteerFeedbackType: SwerveModuleConstants.SteerFeedbackType =
        SwerveModuleConstants.SteerFeedbackType.FusedCANcoder

    // The stator current at which the wheels start to slip;
    // This needs to be tuned to your individual robot
    private val kSlipCurrent: Current = Amps.of(120.0)

    // Initial configs for the drive and steer motors and the azimuth encoder; these cannot be null.
    // Some configs will be overwritten; check the `with*InitialConfigs()` API documentation.
    private val driveInitialConfigs: TalonFXConfiguration = TalonFXConfiguration()
    private val steerInitialConfigs: TalonFXConfiguration =
        TalonFXConfiguration()
            .withCurrentLimits(
                CurrentLimitsConfigs() // Swerve azimuth does not require much torque output, so we
                    // can set a relatively low
                    // stator current limit to help avoid brownouts without impacting performance.
                    .withStatorCurrentLimit(Amps.of(60.0))
                    .withStatorCurrentLimitEnable(true)
            )
    private val encoderInitialConfigs: CANcoderConfiguration = CANcoderConfiguration()
    // Configs for the Pigeon 2; leave this null to skip applying Pigeon 2 configs
    private val pigeonConfigs: Pigeon2Configuration? = null

    // CAN bus that the devices are located on;
    // All swerve devices must share the same CAN bus

    val kCANBus: CANBus = CANBus("TEST_BOT", "./logs/example.hoot")

    // Theoretical free speed (m/s) at 12 V applied output;
    // This needs to be tuned to your individual robot

    val kSpeedAt12Volts: LinearVelocity = MetersPerSecond.of(4.48)

    // Every 1 rotation of the azimuth results in kCoupleRatio drive motor turns;
    // This may need to be tuned to your individual robot
    private const val kCoupleRatio: Double = 3.125

    private const val kDriveGearRatio: Double = 7.125
    private const val kSteerGearRatioN: Double = 18.75
    private const val kSteerGearRatioC: Double = 12.8
    private val kWheelRadius: Distance = Inches.of(2.0)

    private const val kInvertLeftSide: Boolean = false
    private const val kInvertRightSide: Boolean = true

    private const val kPigeonId: Int = 0

    // These are only used for simulation
    private val kSteerInertia: MomentOfInertia = KilogramSquareMeters.of(0.01)
    private val kDriveInertia: MomentOfInertia = KilogramSquareMeters.of(0.01)
    // Simulated voltage necessary to overcome friction
    private val kSteerFrictionVoltage: Voltage = Volts.of(0.2)
    private val kDriveFrictionVoltage: Voltage = Volts.of(0.2)

    val DrivetrainConstants: SwerveDrivetrainConstants =
        SwerveDrivetrainConstants()
            .withCANBusName(kCANBus.name)
            .withPigeon2Id(kPigeonId)
            .withPigeon2Configs(pigeonConfigs)

    private val ConstantCreatorN:
        SwerveModuleConstantsFactory<
            TalonFXConfiguration,
            TalonFXConfiguration,
            CANcoderConfiguration,
        > =
        SwerveModuleConstantsFactory<
                TalonFXConfiguration,
                TalonFXConfiguration,
                CANcoderConfiguration,
            >()
            .withDriveMotorGearRatio(kDriveGearRatio)
            .withSteerMotorGearRatio(kSteerGearRatioN)
            .withCouplingGearRatio(kCoupleRatio)
            .withWheelRadius(kWheelRadius)
            .withSteerMotorGains(steerGainsN)
            .withDriveMotorGains(driveGains)
            .withSteerMotorClosedLoopOutput(kSteerClosedLoopOutput)
            .withDriveMotorClosedLoopOutput(kDriveClosedLoopOutput)
            .withSlipCurrent(kSlipCurrent)
            .withSpeedAt12Volts(kSpeedAt12Volts)
            .withDriveMotorType(kDriveMotorType)
            .withSteerMotorType(kSteerMotorType)
            .withFeedbackSource(kSteerFeedbackType)
            .withDriveMotorInitialConfigs(driveInitialConfigs)
            .withSteerMotorInitialConfigs(steerInitialConfigs)
            .withEncoderInitialConfigs(encoderInitialConfigs)
            .withSteerInertia(kSteerInertia)
            .withDriveInertia(kDriveInertia)
            .withSteerFrictionVoltage(kSteerFrictionVoltage)
            .withDriveFrictionVoltage(kDriveFrictionVoltage)
    private val ConstantCreatorC:
        SwerveModuleConstantsFactory<
            TalonFXConfiguration,
            TalonFXConfiguration,
            CANcoderConfiguration,
        > =
        SwerveModuleConstantsFactory<
                TalonFXConfiguration,
                TalonFXConfiguration,
                CANcoderConfiguration,
            >()
            .withDriveMotorGearRatio(kDriveGearRatio)
            .withSteerMotorGearRatio(kSteerGearRatioC)
            .withCouplingGearRatio(kCoupleRatio)
            .withWheelRadius(kWheelRadius)
            .withSteerMotorGains(steerGainsC)
            .withDriveMotorGains(driveGains)
            .withSteerMotorClosedLoopOutput(kSteerClosedLoopOutput)
            .withDriveMotorClosedLoopOutput(kDriveClosedLoopOutput)
            .withSlipCurrent(kSlipCurrent)
            .withSpeedAt12Volts(kSpeedAt12Volts)
            .withDriveMotorType(kDriveMotorType)
            .withSteerMotorType(kSteerMotorType)
            .withFeedbackSource(kSteerFeedbackType)
            .withDriveMotorInitialConfigs(driveInitialConfigs)
            .withSteerMotorInitialConfigs(steerInitialConfigs)
            .withEncoderInitialConfigs(encoderInitialConfigs)
            .withSteerInertia(kSteerInertia)
            .withDriveInertia(kDriveInertia)
            .withSteerFrictionVoltage(kSteerFrictionVoltage)
            .withDriveFrictionVoltage(kDriveFrictionVoltage)

    // Front Left
    private const val kFrontLeftDriveMotorId: Int = 1
    private const val kFrontLeftSteerMotorId: Int = 2
    private const val kFrontLeftEncoderId: Int = 1
    private val kFrontLeftEncoderOffset: Angle = Rotations.of(0.390625)
    private const val kFrontLeftSteerMotorInverted: Boolean = true
    private const val kFrontLeftEncoderInverted: Boolean = false

    private val kFrontLeftXPos: Distance = Inches.of(11.375)
    private val kFrontLeftYPos: Distance = Inches.of(11.375)

    // Front Right
    private const val kFrontRightDriveMotorId: Int = 3
    private const val kFrontRightSteerMotorId: Int = 4
    private const val kFrontRightEncoderId: Int = 2
    private val kFrontRightEncoderOffset: Angle = Rotations.of(0.2412109375)
    private const val kFrontRightSteerMotorInverted: Boolean = true
    private const val kFrontRightEncoderInverted: Boolean = false

    private val kFrontRightXPos: Distance = Inches.of(11.375)
    private val kFrontRightYPos: Distance = Inches.of(-11.375)

    // Back Left
    private const val kBackLeftDriveMotorId: Int = 5
    private const val kBackLeftSteerMotorId: Int = 6
    private const val kBackLeftEncoderId: Int = 3
    private val kBackLeftEncoderOffset: Angle = Rotations.of(0.4541015625)
    private const val kBackLeftSteerMotorInverted: Boolean = false
    private const val kBackLeftEncoderInverted: Boolean = false

    private val kBackLeftXPos: Distance = Inches.of(-11.375)
    private val kBackLeftYPos: Distance = Inches.of(11.375)

    // Back Right
    private const val kBackRightDriveMotorId: Int = 7
    private const val kBackRightSteerMotorId: Int = 8
    private const val kBackRightEncoderId: Int = 4
    private val kBackRightEncoderOffset: Angle = Rotations.of(0.20751953125)
    private const val kBackRightSteerMotorInverted: Boolean = false
    private const val kBackRightEncoderInverted: Boolean = false

    private val kBackRightXPos: Distance = Inches.of(-11.375)
    private val kBackRightYPos: Distance = Inches.of(-11.375)

    val FrontLeft:
        SwerveModuleConstants<TalonFXConfiguration, TalonFXConfiguration, CANcoderConfiguration> =
        ConstantCreatorN.createModuleConstants(
            kFrontLeftSteerMotorId,
            kFrontLeftDriveMotorId,
            kFrontLeftEncoderId,
            kFrontLeftEncoderOffset,
            kFrontLeftXPos,
            kFrontLeftYPos,
            kInvertLeftSide,
            kFrontLeftSteerMotorInverted,
            kFrontLeftEncoderInverted,
        )

    val FrontRight:
        SwerveModuleConstants<TalonFXConfiguration, TalonFXConfiguration, CANcoderConfiguration> =
        ConstantCreatorN.createModuleConstants(
            kFrontRightSteerMotorId,
            kFrontRightDriveMotorId,
            kFrontRightEncoderId,
            kFrontRightEncoderOffset,
            kFrontRightXPos,
            kFrontRightYPos,
            kInvertRightSide,
            kFrontRightSteerMotorInverted,
            kFrontRightEncoderInverted,
        )

    val BackLeft:
        SwerveModuleConstants<TalonFXConfiguration, TalonFXConfiguration, CANcoderConfiguration> =
        ConstantCreatorC.createModuleConstants(
            kBackLeftSteerMotorId,
            kBackLeftDriveMotorId,
            kBackLeftEncoderId,
            kBackLeftEncoderOffset,
            kBackLeftXPos,
            kBackLeftYPos,
            kInvertLeftSide,
            kBackLeftSteerMotorInverted,
            kBackLeftEncoderInverted,
        )

    val BackRight:
        SwerveModuleConstants<TalonFXConfiguration, TalonFXConfiguration, CANcoderConfiguration> =
        ConstantCreatorC.createModuleConstants(
            kBackRightSteerMotorId,
            kBackRightDriveMotorId,
            kBackRightEncoderId,
            kBackRightEncoderOffset,
            kBackRightXPos,
            kBackRightYPos,
            kInvertRightSide,
            kBackRightSteerMotorInverted,
            kBackRightEncoderInverted,
        )
}
